// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20250101195603_parking_moodel_1")]
    partial class parking_moodel_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Domain.Entities.Models.ParkingLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ParkingLots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57eca706-dcff-417a-b48e-842ce6ddf40e"),
                            Address = "13898 Nader Island, Okeyfurt, Suriname",
                            Description = "Est tempore est iusto soluta et.",
                            Name = "Hackett - Abshire",
                            latitude = 23.892626180183775,
                            longitude = 89.138904281470431
                        },
                        new
                        {
                            Id = new Guid("a1e6b7ff-d5e3-44f6-a185-8a096f40b798"),
                            Address = "110 Upton Estate, Paucekfurt, Belize",
                            Description = "Placeat asperiores error.",
                            Name = "Witting - Friesen",
                            latitude = 23.88776119840907,
                            longitude = 89.119022777502295
                        },
                        new
                        {
                            Id = new Guid("266f8638-3805-492d-a872-94cb569cd27b"),
                            Address = "46399 Bahringer Stravenue, Port Birdie, Marshall Islands",
                            Description = "Consequatur dolore velit nam est et rerum ut neque vero.",
                            Name = "Hyatt Inc",
                            latitude = 23.888311733618991,
                            longitude = 89.099423516151745
                        },
                        new
                        {
                            Id = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            Address = "597 Syble Crossing, Olgaland, Barbados",
                            Description = "Facilis quibusdam inventore.",
                            Name = "Muller Group",
                            latitude = 23.905043627143375,
                            longitude = 89.146605618007058
                        },
                        new
                        {
                            Id = new Guid("91f45093-d313-4d5b-82cd-58fa754f2d93"),
                            Address = "62269 Spinka Point, Floydside, Taiwan",
                            Description = "Adipisci nostrum minus magni.",
                            Name = "Wyman - Lemke",
                            latitude = 23.907187067970931,
                            longitude = 89.109804321631671
                        },
                        new
                        {
                            Id = new Guid("b73f4670-3f97-40c4-9dbf-2749b08740fa"),
                            Address = "3425 Sporer Forges, New Maximoton, Portugal",
                            Description = "Rerum est nihil dolores enim iure at recusandae ut maiores.",
                            Name = "Ritchie - Gutmann",
                            latitude = 23.888316153525082,
                            longitude = 89.133589140033308
                        },
                        new
                        {
                            Id = new Guid("48c7da8d-d4cd-48e4-838a-7cdf57a3dbf8"),
                            Address = "939 Hoppe Mountain, Hillsborough, Somalia",
                            Description = "Velit dolor maiores at est et.",
                            Name = "Heidenreich - Mosciski",
                            latitude = 23.903954677657424,
                            longitude = 89.131602261188974
                        },
                        new
                        {
                            Id = new Guid("39468006-c1d6-4c27-86a8-c0ff6915954d"),
                            Address = "279 Spencer Port, New Ricoshire, Central African Republic",
                            Description = "Tenetur suscipit blanditiis deleniti maxime officia quidem aspernatur in.",
                            Name = "Klein Group",
                            latitude = 23.908507157432538,
                            longitude = 89.148880168572063
                        },
                        new
                        {
                            Id = new Guid("cd391eaa-08b8-442e-986e-599083aca06e"),
                            Address = "244 Federico Street, Margaretberg, Antarctica (the territory South of 60 deg S)",
                            Description = "Iusto cupiditate quia dolorem.",
                            Name = "Schaden, Konopelski and Rosenbaum",
                            latitude = 23.882816724487977,
                            longitude = 89.150900249184147
                        },
                        new
                        {
                            Id = new Guid("b5df6745-d30b-4691-ae16-7477184cd22b"),
                            Address = "933 Maribel Fords, South Claireport, Malta",
                            Description = "Provident tempore quia culpa harum officia excepturi inventore et.",
                            Name = "Hettinger, Wuckert and Larkin",
                            latitude = 23.895335708425002,
                            longitude = 89.10435557335181
                        });
                });

            modelBuilder.Entity("Domain.Entities.Models.ParkingSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ParkingLotId")
                        .HasColumnType("TEXT");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("REAL");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParkingLotId");

                    b.ToTable("ParkingSpaces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af3344b2-65f2-4105-b61f-452ad28fffb8"),
                            Capacity = 28,
                            ParkingLotId = new Guid("48c7da8d-d4cd-48e4-838a-7cdf57a3dbf8"),
                            PricePerHour = 12.33232245723925,
                            SectionName = "A-6",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("a3f71ad7-d4c8-43d0-8ba2-e357bfb43715"),
                            Capacity = 40,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 7.6810145223099635,
                            SectionName = "A-2",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("d37a1ad8-404c-4c42-8147-414e8f5f4656"),
                            Capacity = 28,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 6.9127041460113166,
                            SectionName = "D-5",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("0fd162ce-f5b8-42e7-8aa0-892c8097eb5b"),
                            Capacity = 32,
                            ParkingLotId = new Guid("a1e6b7ff-d5e3-44f6-a185-8a096f40b798"),
                            PricePerHour = 14.586403606244845,
                            SectionName = "C-17",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("8cb37558-25ac-4cb2-a68e-1a83a0679e15"),
                            Capacity = 42,
                            ParkingLotId = new Guid("cd391eaa-08b8-442e-986e-599083aca06e"),
                            PricePerHour = 8.8122770727490369,
                            SectionName = "B-7",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("759f5f6e-2bd9-49b4-b62c-0fed9c8a340e"),
                            Capacity = 30,
                            ParkingLotId = new Guid("48c7da8d-d4cd-48e4-838a-7cdf57a3dbf8"),
                            PricePerHour = 9.9841472413450933,
                            SectionName = "C-9",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("42dc44e8-a75f-449e-a2a4-f6a3d0b565d3"),
                            Capacity = 31,
                            ParkingLotId = new Guid("91f45093-d313-4d5b-82cd-58fa754f2d93"),
                            PricePerHour = 6.7053851113062652,
                            SectionName = "B-12",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("bcb8fc49-a251-4d04-94fc-2eaa5dee78a4"),
                            Capacity = 49,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 19.780663320634297,
                            SectionName = "D-6",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("118f64bd-1457-4cef-ad83-f2e012e98540"),
                            Capacity = 15,
                            ParkingLotId = new Guid("b73f4670-3f97-40c4-9dbf-2749b08740fa"),
                            PricePerHour = 13.966158285221363,
                            SectionName = "A-8",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("80c51b07-c8ac-49d7-96a4-587b47f3f28a"),
                            Capacity = 49,
                            ParkingLotId = new Guid("48c7da8d-d4cd-48e4-838a-7cdf57a3dbf8"),
                            PricePerHour = 9.9453691500855044,
                            SectionName = "B-18",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("bbf5b7ac-a50b-4027-9fa7-fa0804335022"),
                            Capacity = 33,
                            ParkingLotId = new Guid("266f8638-3805-492d-a872-94cb569cd27b"),
                            PricePerHour = 16.566507973045816,
                            SectionName = "A-1",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("10473166-6693-4281-8aa6-639b4e8c07b6"),
                            Capacity = 37,
                            ParkingLotId = new Guid("266f8638-3805-492d-a872-94cb569cd27b"),
                            PricePerHour = 19.361347897081064,
                            SectionName = "B-1",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("b30c1335-a32a-4c0b-a826-13302c24077a"),
                            Capacity = 45,
                            ParkingLotId = new Guid("39468006-c1d6-4c27-86a8-c0ff6915954d"),
                            PricePerHour = 6.1578097423095173,
                            SectionName = "A-11",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("ab74d4bf-3066-4a8b-8dfc-5c78fb094791"),
                            Capacity = 22,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 16.174229053129796,
                            SectionName = "B-10",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("9bb755b7-3588-4de7-b775-9db7e1b80b35"),
                            Capacity = 15,
                            ParkingLotId = new Guid("57eca706-dcff-417a-b48e-842ce6ddf40e"),
                            PricePerHour = 15.509685115576719,
                            SectionName = "A-19",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("febc0f5d-f371-4dc4-9c5a-e1cb25eb063b"),
                            Capacity = 15,
                            ParkingLotId = new Guid("b5df6745-d30b-4691-ae16-7477184cd22b"),
                            PricePerHour = 6.1819410739568115,
                            SectionName = "C-12",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("4b67061c-a137-4116-851a-d63722aeeaac"),
                            Capacity = 19,
                            ParkingLotId = new Guid("57eca706-dcff-417a-b48e-842ce6ddf40e"),
                            PricePerHour = 15.505833848685823,
                            SectionName = "D-19",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("527a002a-a585-4d31-9fe3-4dd18f030b6a"),
                            Capacity = 22,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 8.4770121110788743,
                            SectionName = "A-17",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("c2d1d9ab-bc31-4599-89ec-5f9b4b53cc4a"),
                            Capacity = 44,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 16.315271241066121,
                            SectionName = "C-15",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("24639b99-3bdf-4603-a030-9b0dde29d6cd"),
                            Capacity = 35,
                            ParkingLotId = new Guid("b5df6745-d30b-4691-ae16-7477184cd22b"),
                            PricePerHour = 15.153764617482022,
                            SectionName = "A-3",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("a63595c4-c597-4465-8b59-ce092f18b654"),
                            Capacity = 44,
                            ParkingLotId = new Guid("b73f4670-3f97-40c4-9dbf-2749b08740fa"),
                            PricePerHour = 13.083383047427587,
                            SectionName = "C-8",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("e2912572-12df-4093-b16d-d80d1cebe3f4"),
                            Capacity = 40,
                            ParkingLotId = new Guid("266f8638-3805-492d-a872-94cb569cd27b"),
                            PricePerHour = 13.533947825389628,
                            SectionName = "C-4",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("19f59729-462c-4c6e-aa1d-2eb98aed336a"),
                            Capacity = 39,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 19.952309301183838,
                            SectionName = "C-14",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("fcf59565-e4c1-47e3-ad4e-1fff994f2c8d"),
                            Capacity = 26,
                            ParkingLotId = new Guid("48c7da8d-d4cd-48e4-838a-7cdf57a3dbf8"),
                            PricePerHour = 16.14099513903227,
                            SectionName = "B-9",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("b4db7ae2-96ef-483f-a014-6f53b4ea071e"),
                            Capacity = 22,
                            ParkingLotId = new Guid("b5df6745-d30b-4691-ae16-7477184cd22b"),
                            PricePerHour = 8.227812033302337,
                            SectionName = "A-3",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("a4be293b-2fec-4608-bd88-41c1c409f9b1"),
                            Capacity = 10,
                            ParkingLotId = new Guid("cd391eaa-08b8-442e-986e-599083aca06e"),
                            PricePerHour = 12.050696691452014,
                            SectionName = "B-18",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("2f6fe8a5-6312-4f73-91b5-1f44e094c8bf"),
                            Capacity = 24,
                            ParkingLotId = new Guid("cd391eaa-08b8-442e-986e-599083aca06e"),
                            PricePerHour = 18.359090007258324,
                            SectionName = "C-17",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("2ca1d638-2296-48d5-9be1-4cbcea928226"),
                            Capacity = 20,
                            ParkingLotId = new Guid("266f8638-3805-492d-a872-94cb569cd27b"),
                            PricePerHour = 13.836605728537387,
                            SectionName = "D-19",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("c46840a3-c02a-4d30-9098-05d92ee46e72"),
                            Capacity = 16,
                            ParkingLotId = new Guid("39468006-c1d6-4c27-86a8-c0ff6915954d"),
                            PricePerHour = 16.781571264015302,
                            SectionName = "D-19",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("6fbb6b58-8060-4a08-bab7-f9fa37373015"),
                            Capacity = 34,
                            ParkingLotId = new Guid("39468006-c1d6-4c27-86a8-c0ff6915954d"),
                            PricePerHour = 6.4398530983966547,
                            SectionName = "A-9",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("f1c6f07e-d819-4971-9f62-169f5a870ed2"),
                            Capacity = 40,
                            ParkingLotId = new Guid("a1e6b7ff-d5e3-44f6-a185-8a096f40b798"),
                            PricePerHour = 18.984391376412198,
                            SectionName = "A-13",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("125d4b60-120d-4ded-bc28-40f17ee70321"),
                            Capacity = 15,
                            ParkingLotId = new Guid("664ae4a3-c11e-417d-85b6-ffbe021c90ae"),
                            PricePerHour = 6.7983245329865944,
                            SectionName = "D-19",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("471e5627-1658-4809-aae5-f3aa18ad8396"),
                            Capacity = 16,
                            ParkingLotId = new Guid("cd391eaa-08b8-442e-986e-599083aca06e"),
                            PricePerHour = 13.034586225760197,
                            SectionName = "D-5",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("549f1288-b808-4d76-91af-c708b7e41eab"),
                            Capacity = 47,
                            ParkingLotId = new Guid("57eca706-dcff-417a-b48e-842ce6ddf40e"),
                            PricePerHour = 5.3337111350009909,
                            SectionName = "B-13",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("0f519fe2-4873-4dc6-be0a-b4b06d36b0cd"),
                            Capacity = 24,
                            ParkingLotId = new Guid("a1e6b7ff-d5e3-44f6-a185-8a096f40b798"),
                            PricePerHour = 12.795442821893351,
                            SectionName = "A-9",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("4c795b09-ff25-4d7a-94b1-2c71ace65453"),
                            Capacity = 49,
                            ParkingLotId = new Guid("a1e6b7ff-d5e3-44f6-a185-8a096f40b798"),
                            PricePerHour = 18.436518562830202,
                            SectionName = "A-1",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("c46af96d-95ea-4b04-a647-331d8a47d398"),
                            Capacity = 50,
                            ParkingLotId = new Guid("b73f4670-3f97-40c4-9dbf-2749b08740fa"),
                            PricePerHour = 9.4534173927887792,
                            SectionName = "A-17",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("e50c2398-c114-41b9-9595-ae021a989b3d"),
                            Capacity = 25,
                            ParkingLotId = new Guid("b5df6745-d30b-4691-ae16-7477184cd22b"),
                            PricePerHour = 17.413204937686807,
                            SectionName = "C-4",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("c16b5981-12c6-4dd9-893e-b69b3a71ca8d"),
                            Capacity = 38,
                            ParkingLotId = new Guid("266f8638-3805-492d-a872-94cb569cd27b"),
                            PricePerHour = 10.977550590310672,
                            SectionName = "A-8",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("d18c9b5d-b2f9-4c5d-93ad-c9cf3ca3e758"),
                            Capacity = 31,
                            ParkingLotId = new Guid("91f45093-d313-4d5b-82cd-58fa754f2d93"),
                            PricePerHour = 14.966591295406278,
                            SectionName = "D-8",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("50875bec-6aba-459d-9541-f25054a210c0"),
                            Capacity = 25,
                            ParkingLotId = new Guid("a1e6b7ff-d5e3-44f6-a185-8a096f40b798"),
                            PricePerHour = 17.705429800014279,
                            SectionName = "A-6",
                            VehicleType = 0
                        },
                        new
                        {
                            Id = new Guid("204bdba4-7dc5-4719-bf2d-fb754e89b450"),
                            Capacity = 21,
                            ParkingLotId = new Guid("b73f4670-3f97-40c4-9dbf-2749b08740fa"),
                            PricePerHour = 10.561430096167445,
                            SectionName = "C-14",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("8a2341b7-1992-4da7-935d-3b2f48ca9f41"),
                            Capacity = 30,
                            ParkingLotId = new Guid("b5df6745-d30b-4691-ae16-7477184cd22b"),
                            PricePerHour = 17.722519623664812,
                            SectionName = "B-1",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("884db358-8a3b-491a-aac6-f6e2a5ad5590"),
                            Capacity = 28,
                            ParkingLotId = new Guid("39468006-c1d6-4c27-86a8-c0ff6915954d"),
                            PricePerHour = 15.432597948046247,
                            SectionName = "C-15",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("ba72bb65-0276-428e-968f-6e939d885711"),
                            Capacity = 48,
                            ParkingLotId = new Guid("266f8638-3805-492d-a872-94cb569cd27b"),
                            PricePerHour = 12.582574414441741,
                            SectionName = "D-8",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("a9f19ed4-7a1b-4470-9ea1-975ef784d423"),
                            Capacity = 19,
                            ParkingLotId = new Guid("57eca706-dcff-417a-b48e-842ce6ddf40e"),
                            PricePerHour = 15.58587471788597,
                            SectionName = "B-12",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("3aa4d7d7-efc3-452b-9283-ce91d2d45301"),
                            Capacity = 31,
                            ParkingLotId = new Guid("48c7da8d-d4cd-48e4-838a-7cdf57a3dbf8"),
                            PricePerHour = 5.7122875492342216,
                            SectionName = "A-4",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("b7446432-5e45-437a-a475-bb0a19c2b842"),
                            Capacity = 49,
                            ParkingLotId = new Guid("b5df6745-d30b-4691-ae16-7477184cd22b"),
                            PricePerHour = 19.438460786470035,
                            SectionName = "A-19",
                            VehicleType = 1
                        },
                        new
                        {
                            Id = new Guid("7b564d17-06e2-401e-bbce-a10f3681cd9f"),
                            Capacity = 36,
                            ParkingLotId = new Guid("48c7da8d-d4cd-48e4-838a-7cdf57a3dbf8"),
                            PricePerHour = 11.994348269043483,
                            SectionName = "D-14",
                            VehicleType = 2
                        },
                        new
                        {
                            Id = new Guid("b5b25fbf-c70a-47cc-af94-c51ec938095c"),
                            Capacity = 13,
                            ParkingLotId = new Guid("57eca706-dcff-417a-b48e-842ce6ddf40e"),
                            PricePerHour = 16.219038582542126,
                            SectionName = "C-5",
                            VehicleType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a94ec28e-da22-4681-be2c-dec4a19bb62b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "4756678c-b5b7-491a-992c-19f486247f9d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Models.ParkingSpace", b =>
                {
                    b.HasOne("Domain.Entities.Models.ParkingLot", "ParkingLot")
                        .WithMany("ParkingSpaces")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingLot");
                });

            modelBuilder.Entity("Domain.Entities.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Models.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Domain.Entities.Models.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Models.ParkingLot", b =>
                {
                    b.Navigation("ParkingSpaces");
                });

            modelBuilder.Entity("Domain.Entities.Models.User", b =>
                {
                    b.Navigation("RefreshToken");
                });
#pragma warning restore 612, 618
        }
    }
}
